`timescale 1ns / 1ps
//////////////////////////////////////////////////////////////////////////////////
// AY1718 Sem 1 EE2020 Project
// Project Name: Audio Effects
// Module Name: AUDIO_FX_TOP
// Team No.: 
// Student Names: 
// Matric No.:
// Description: 
// 
// Work Distribution:
//////////////////////////////////////////////////////////////////////////////////

module AUDIO_FX_TOP(
    input CLK,            // 100MHz FPGA clock
    
//    input lab1switch,
//    input lab2switch,
//    input lab3switch,
    input [15:0] sw,
    
    input [4:0] btn,
    
    input  J_MIC3_Pin3,   // PmodMIC3 audio input data (serial)
    output J_MIC3_Pin1,   // PmodMIC3 chip select, 20kHz sampling clock
    output J_MIC3_Pin4,   // PmodMIC3 serial clock (generated by module SPI.v)
     
    output J_DA2_Pin1,    // PmodDA2 sampling clock (generated by module DA2RefComp.vhd)
    output J_DA2_Pin2,    // PmodDA2 Data_A, 12-bit speaker output (generated by module DA2RefComp.vhd)
    output J_DA2_Pin3,    // PmodDA2 Data_B, not used (generated by module DA2RefComp.vhd)
    output J_DA2_Pin4,     // PmodDA2 serial clock, 50MHz clock
    
    output [15:0]led,
    output [3:0]an,
    output [6:0]seg,
    output dp
    );

    //////////////////////////////////////////////////////////////////////////////////
    // Clock Divider Module: Generate necessary clocks from 100MHz FPGA CLK
    // Please create the clock divider module and instantiate it here.

      FlexiClock cc20k(20000,CLK,clk_20k);
      FlexiClock cc2(50000000,CLK,clk_50M);

  
     //////////////////////////////////////////////////////////////////////////////////
     //SPI Module: Converting serial data into a 12-bit parallel register
     //Do not change the codes in this area
       wire [11:0]MIC_in;
       SPI u1 (CLK, clk_20k, J_MIC3_Pin3, J_MIC3_Pin1, J_MIC3_Pin4, MIC_in);
        
       
    /////////////////////////////////////////////////////////////////////////////////////
    // Real-time Audio Effect Features
    // Please create modules to implement different features and instantiate them here   
      
      wire [15:0]led_display;
      wire [13:0]sevensegment2b;
      project_2b mpt(MIC_in, clk_20k2a, clk_1002a, led_display, sevensegment2b);
      
      wire [11:0]speaker_out;
//      wire [11:0]hellospeaker20k;
//      wire [11:0]hellospeaker30k;
//      wire [11:0]hellospeaker50k;
//      //Plays if !btnU and !btnD
//      project_3b mpthree20k(clk_20k3b, hellospeaker20k);
      
//      //Plays if btnU
//      project_3b mpthree50k(clk_50k3b, hellospeaker50k);
//      //Plays if btnD
//      project_3b mpthree5k(clk_30k3b, hellospeaker30k);
      
      
//      //Module to select which speaker should be played
//      wire [11:0]speaker_selected;
//      speaker_picker sp(CLK,sw,hellospeaker20k,hellospeaker30k,hellospeaker50k,
//                        btnU,btnD,btnC,speaker_selected);
//      assign speaker_out = speaker_selected;
      
//      //Module to select which led should be output
//      wire [15:0]led_selected;
//      led_picker lp(CLK,sw,led_display,led_selected);
//      assign led = led_selected;
      
//      //Module to select which seven-segment to display
//      wire [3:0]an_selected;
//      wire [6:0]seg_selected;
//      sevenseg_picker ssp(clk_100,sw,sevensegment2b,an_selected,seg_selected);
//      assign an = an_selected;
//      assign seg = seg_selected;
      
      task_selector ts(CLK, sw, btn, led, an, seg, speaker_out);
      
    /////////////////////////////////////////////////////////////////////////////////////
    //DAC Module: Digital-to-Analog Conversion
    //Do not change the codes in this area        
      DA2RefComp u2(clk_50M, clk_20k, speaker_out, ,1'b0, J_DA2_Pin2, J_DA2_Pin3, J_DA2_Pin4, J_DA2_Pin1,);
        
    //////////////////////////////////////////////////////////////////////////////////
  
endmodule
